/**
 * üìù M√≥dulo de Logging - A-SDLC Framework
 * Sistema de logging estruturado para melhor rastreabilidade
 */

// ===== N√çVEIS DE LOG =====
const LOG_LEVELS = {
    DEBUG: 'debug',
    INFO: 'info',
    WARN: 'warn',
    ERROR: 'error',
    SUCCESS: 'success'
};

// ===== EMOJIS POR A√á√ÉO =====
const LOG_EMOJIS = {
    INIT: 'üöÄ',
    SUCCESS: '‚úÖ',
    ERROR: '‚ùå',
    WARNING: '‚ö†Ô∏è',
    INFO: '‚ÑπÔ∏è',
    DEBUG: 'üîç',
    SYNC: 'üîÑ',
    TASK: 'üìã',
    KANBAN: 'üìä',
    DRAG: 'üéØ',
    VALIDATION: 'üõ°Ô∏è',
    STORAGE: 'üíæ',
    UI: 'üé®'
};

/**
 * üìù Logger principal
 */
class Logger {
    constructor(module = 'App') {
        this.module = module;
    }

    /**
     * üîç Log de debug
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    debug(message, data = null) {
        this._log(LOG_LEVELS.DEBUG, LOG_EMOJIS.DEBUG, message, data);
    }

    /**
     * ‚ÑπÔ∏è Log de informa√ß√£o
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    info(message, data = null) {
        this._log(LOG_LEVELS.INFO, LOG_EMOJIS.INFO, message, data);
    }

    /**
     * ‚úÖ Log de sucesso
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    success(message, data = null) {
        this._log(LOG_LEVELS.SUCCESS, LOG_EMOJIS.SUCCESS, message, data);
    }

    /**
     * ‚ö†Ô∏è Log de aviso
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    warn(message, data = null) {
        this._log(LOG_LEVELS.WARN, LOG_EMOJIS.WARNING, message, data);
    }

    /**
     * ‚ùå Log de erro
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    error(message, data = null) {
        this._log(LOG_LEVELS.ERROR, LOG_EMOJIS.ERROR, message, data);
    }

    /**
     * üìù M√©todo interno de logging
     * @param {string} level - N√≠vel do log
     * @param {string} emoji - Emoji do log
     * @param {string} message - Mensagem
     * @param {any} data - Dados opcionais
     */
    _log(level, emoji, message, data = null) {
        const timestamp = new Date().toISOString();
        const logMessage = `${emoji} [${this.module}] ${message}`;
        
        switch (level) {
            case LOG_LEVELS.DEBUG:
                console.debug(logMessage, data);
                break;
            case LOG_LEVELS.INFO:
                console.info(logMessage, data);
                break;
            case LOG_LEVELS.SUCCESS:
                console.log(logMessage, data);
                break;
            case LOG_LEVELS.WARN:
                console.warn(logMessage, data);
                break;
            case LOG_LEVELS.ERROR:
                console.error(logMessage, data);
                break;
        }
    }
}

/**
 * üè≠ Factory para criar loggers espec√≠ficos
 * @param {string} module - Nome do m√≥dulo
 * @returns {Logger} - Inst√¢ncia do logger
 */
export function createLogger(module) {
    return new Logger(module);
}

/**
 * üìä Logger espec√≠fico para m√©tricas de performance
 */
export class PerformanceLogger extends Logger {
    constructor() {
        super('Performance');
    }

    /**
     * ‚è±Ô∏è Medir tempo de execu√ß√£o
     * @param {string} operation - Nome da opera√ß√£o
     * @param {Function} fn - Fun√ß√£o a medir
     * @returns {any} - Resultado da fun√ß√£o
     */
    async measureTime(operation, fn) {
        const start = performance.now();
        try {
            const result = await fn();
            const end = performance.now();
            const duration = end - start;
            
            this.success(`${operation} executada em ${duration.toFixed(2)}ms`);
            return result;
        } catch (error) {
            const end = performance.now();
            const duration = end - start;
            this.error(`${operation} falhou ap√≥s ${duration.toFixed(2)}ms`, error);
            throw error;
        }
    }

    /**
     * üìà Log de m√©trica
     * @param {string} metric - Nome da m√©trica
     * @param {number} value - Valor da m√©trica
     * @param {string} unit - Unidade da m√©trica
     */
    metric(metric, value, unit = '') {
        this.info(`${metric}: ${value}${unit}`);
    }
}

// ===== LOGGERS ESPEC√çFICOS =====
export const appLogger = createLogger('TodoApp');
export const kanbanLogger = createLogger('Kanban');
export const taskLogger = createLogger('TaskManager');
export const storageLogger = createLogger('Storage');
export const performanceLogger = new PerformanceLogger(); 