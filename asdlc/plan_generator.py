# asdlc/plan_generator.py (vers√£o Arquiteto de Software)
import logging
from pathlib import Path
from .llm_client import call_llm
from .utils import get_project_structure

logger = logging.getLogger(__name__)

def gerar_plano_de_execucao(story_data: dict, project_root: Path) -> str:
    """
    Usa uma LLM para atuar como arquiteto e gerar um plano de execu√ß√£o completo.
    """
    logger.info(f"Iniciando planejamento com IA para a story: {story_data.get('title')}")

    # 1. Coletar contexto do projeto
    try:
        context_file = project_root / "PROJECT_CONTEXT.md"
        project_context = context_file.read_text(encoding='utf-8') if context_file.exists() else "Nenhum PROJECT_CONTEXT.md fornecido."
    except Exception as e:
        project_context = f"Erro ao ler PROJECT_CONTEXT.md: {e}"

    project_structure = get_project_structure(project_root)

    # 2. Construir o prompt de "Arquiteto" para a LLM
    prompt = f"""
    **PERSONA:** Voc√™ √© um Arquiteto de Software S√™nior e especialista no framework A-SDLC.

    **TAREFA:** Sua miss√£o √© transformar uma solicita√ß√£o de alto n√≠vel em um plano de execu√ß√£o detalhado em Markdown. Voc√™ deve analisar a solicita√ß√£o, considerar o contexto do projeto e, o mais importante, **criar um Manifesto de Arquivos espec√≠fico e acion√°vel com os arquivos de C√ìDIGO FONTE necess√°rios.**

    **REGRAS CR√çTICAS:**
    1.  Seu foco √© **EXCLUSIVAMENTE** na solicita√ß√£o do usu√°rio.
    2.  O Manifesto de Arquivos deve conter **APENAS arquivos de c√≥digo fonte** (ex: `.html`, `.py`, `.js`, `.css`, etc.) ou de configura√ß√£o (ex: `Dockerfile`, `requirements.txt`).
    3.  **NUNCA** inclua arquivos do pr√≥prio framework A-SDLC (como `.md` da pasta `.asdlc/` ou `stories/`) no Manifesto.
    4.  **CONSIDERE O TIPO DE PROJETO:**
       - `web_frontend`: Use HTML, CSS, JavaScript (ex: `index.html`, `style.css`, `script.js`)
       - `web_api`: Use Python/Node.js (ex: `app.py`, `requirements.txt` ou `server.js`, `package.json`)
       - `web_fullstack`: Combine frontend e backend
       - `mobile`: Use React Native/Flutter (ex: `App.js`, `package.json`)
       - `desktop`: Use Electron/Python GUI (ex: `main.js`, `index.html`)
       - `cli`: Use Python/Node.js CLI (ex: `main.py`, `requirements.txt`)

    **EXEMPLOS DE BONS RESULTADOS POR TIPO:**
    ---
    **Web Frontend:**
    - T√≠tulo: "Implementar rel√≥gio anal√≥gico HTML"
    - Descri√ß√£o: "Criar uma p√°gina web est√°tica que exibe um rel√≥gio anal√≥gico funcional e estilizado"
    - **Manifesto:** `index.html`, `style.css`, `script.js`
    - **Tarefas:** Estrutura HTML, design CSS, l√≥gica JavaScript
    - **Crit√©rios:** Design responsivo, anima√ß√µes suaves, JavaScript puro

    **Web API:**
    - T√≠tulo: "Otimizar Cache InfluxDB com Sistema Unificado"
    - Descri√ß√£o: "Implementar cache unificado por tipo de dados com rate limiting"
    - **Manifesto:** `app/services/influxdb_smart_cache.py`, `app/services/influxdb_service.py`
    - **Tarefas:** Cache unificado, rate limiting, m√©tricas de performance
    - **Crit√©rios:** Redu√ß√£o de 60% no tempo de resposta, cache hit rate > 80%

    **Mobile App:**
    - T√≠tulo: "App de lista de tarefas React Native"
    - Descri√ß√£o: "Aplicativo m√≥vel para gerenciar tarefas com persist√™ncia local"
    - **Manifesto:** `App.js`, `package.json`, `components/TodoList.js`, `services/storage.js`
    - **Tarefas:** Interface React Native, persist√™ncia AsyncStorage, componentes reutiliz√°veis
    - **Crit√©rios:** Interface intuitiva, persist√™ncia de dados, performance otimizada

    **Desktop App:**
    - T√≠tulo: "Aplicativo desktop de gerenciamento de arquivos"
    - Descri√ß√£o: "Criar aplicativo desktop para organizar e gerenciar arquivos"
    - **Manifesto:** `main.js`, `index.html`, `package.json`, `src/fileManager.js`
    - **Tarefas:** Interface Electron, gerenciamento de arquivos, UX desktop
    - **Crit√©rios:** Interface intuitiva, performance otimizada, instala√ß√£o simples

    **CLI App:**
    - T√≠tulo: "CLI para gerenciamento de projetos"
    - Descri√ß√£o: "Criar ferramenta de linha de comando para gerenciar projetos"
    - **Manifesto:** `main.py`, `requirements.txt`, `src/cli_commands.py`
    - **Tarefas:** Interface CLI, comandos interativos, configura√ß√£o
    - **Crit√©rios:** Interface clara, comandos intuitivos, documenta√ß√£o completa
    ---

    **CONTEXTO DO PROJETO ATUAL:**
    ---
    **CONSTITUI√á√ÉO DO PROJETO (PROJECT_CONTEXT.md):**
    {project_context}
    ---
    **ESTRUTURA DE ARQUIVOS ATUAL:**
    {project_structure}
    ---

    **SOLICITA√á√ÉO DO USU√ÅRIO ATUAL (STORY):**
    - T√≠tulo: {story_data.get('title', 'N/A')}
    - Descri√ß√£o: {story_data.get('description', 'N/A')}
    - Tipo de Projeto: {project_context.split('**Tipo:**')[1].split('**')[0].strip() if '**Tipo:**' in project_context else 'N/A'}

    **SUA SA√çDA:**
    Agora, com base na solicita√ß√£o do usu√°rio atual e no contexto fornecido, gere o conte√∫do completo do arquivo Markdown para o plano de execu√ß√£o. 
    
    **IMPORTANTE:** 
    1. **ADAPTE AO TIPO DE PROJETO:**
       - `web_frontend`: Foque em HTML/CSS/JS, responsividade, UX web
       - `web_api`: Foque em Python/Node.js, seguran√ßa, documenta√ß√£o API
       - `web_fullstack`: Combine frontend e backend, arquitetura completa
       - `mobile`: Foque em React Native/Flutter, UX m√≥vel, performance
       - `desktop`: Foque em Electron/Python GUI, UX desktop, instala√ß√£o
       - `cli`: Foque em Python/Node.js CLI, interface de linha de comando
    
    2. **INCLUA SEMPRE** as instru√ß√µes para os agentes de IA (Code Agent, Test Agent, Review Agent, etc.) na se√ß√£o "ü§ñ Instru√ß√µes para Agentes de IA".
    
    3. **SEJA ESPEC√çFICO** nas tarefas, crit√©rios de aceita√ß√£o e m√©tricas de sucesso.
    
    4. **FORNE√áA EXEMPLOS DE C√ìDIGO** concretos e implement√°veis nas tarefas, usando a linguagem apropriada para o tipo de projeto.
    
    5. **DEFINA PADR√ïES OBRIGAT√ìRIOS** e princ√≠pios espec√≠ficos para o tipo de projeto:
       - **Web Frontend**: Responsividade, acessibilidade, performance
       - **Web API**: Seguran√ßa, documenta√ß√£o, testes de integra√ß√£o
       - **Mobile**: UX m√≥vel, performance, compatibilidade
       - **Desktop**: UX desktop, instala√ß√£o, atualiza√ß√µes
       - **CLI**: Interface clara, documenta√ß√£o, comandos intuitivos
    
    Siga ESTRITAMENTE a estrutura de sa√≠da abaixo. Preencha TODAS as se√ß√µes de forma detalhada e espec√≠fica. N√£o adicione nenhuma outra explica√ß√£o ou texto antes ou depois da sua resposta em Markdown.

    **ESTRUTURA DE SA√çDA (MARKDOWN):**
    ---
    title: "{story_data.get('title', 'N/A')}"
    ticket: "{story_data.get('id', 'N/A')}"
    status: "PENDENTE"
    ---

    # Plano de Execu√ß√£o: {story_data.get('title', 'N/A')}

    ## üìù Especifica√ß√µes da Story

    **Hist√≥ria do Usu√°rio:**
    {story_data.get('description', 'N/A')}

    ## Manifesto de Arquivos (Gerado por IA)
    - **CRIAR:** [Liste EXATAMENTE os arquivos de c√≥digo fonte necess√°rios]
    - **MODIFICAR:** [Liste arquivos existentes que precisam ser alterados]

    ## üéØ Tarefas Detalhadas

    ### Tarefa 1: [Nome da primeira tarefa]
    1. **Arquivo a criar/modificar**: [Nome do arquivo]
    2. **Refer√™ncia de Contexto**: [Contexto relevante]
    3. **A√ß√£o**: [Descri√ß√£o espec√≠fica da a√ß√£o]

    #### 1.1 [Subtarefa espec√≠fica]
    ```[linguagem]
    [C√≥digo exemplo concreto e implement√°vel]
    ```

    ### Tarefa 2: [Nome da segunda tarefa]
    1. **Arquivo a criar/modificar**: [Nome do arquivo]
    2. **A√ß√£o**: [Descri√ß√£o espec√≠fica da a√ß√£o]

    #### 2.1 [Subtarefa espec√≠fica]
    ```[linguagem]
    [C√≥digo exemplo concreto e implement√°vel]
    ```

    ## ‚úÖ Crit√©rios de Aceita√ß√£o

    - [ ] [Crit√©rio espec√≠fico e mensur√°vel]
    - [ ] [Crit√©rio espec√≠fico e mensur√°vel]
    - [ ] [Crit√©rio espec√≠fico e mensur√°vel]

    ## üìã Padr√µes Obrigat√≥rios a Seguir

    ### **Terminologia Padronizada**:
    - ‚úÖ **SEMPRE USAR**:
      - [Termos espec√≠ficos do projeto]
      - [Padr√µes de nomenclatura]

    ### **Padr√µes Proibidos**:
    - ‚ùå **NUNCA USAR**:
      - [Termos proibidos]
      - [Padr√µes n√£o recomendados]

    ### **Estrutura de C√≥digo**:
    - [Padr√µes espec√≠ficos de c√≥digo]
    - [Conven√ß√µes obrigat√≥rias]

    ## üé® Princ√≠pios a Seguir

    - **Seguran√ßa**: [Princ√≠pio de seguran√ßa espec√≠fico]
    - **Performance**: [Princ√≠pio de performance espec√≠fico]
    - **Logging**: [Padr√µes de logging]
    - **Modularidade**: [Princ√≠pio de modularidade]
    - **Reutiliza√ß√£o**: [Princ√≠pio de reutiliza√ß√£o]

    ## üìä M√©tricas de Sucesso

    ### **Performance**:
    - [M√©trica espec√≠fica e mensur√°vel]
    - [M√©trica espec√≠fica e mensur√°vel]

    ### **Estabilidade**:
    - [M√©trica espec√≠fica e mensur√°vel]
    - [M√©trica espec√≠fica e mensur√°vel]

    ### **Experi√™ncia do Usu√°rio**:
    - [M√©trica espec√≠fica e mensur√°vel]
    - [M√©trica espec√≠fica e mensur√°vel]

    ## ‚è±Ô∏è Plano de Implementa√ß√£o

    ### **Fase 1: [Nome da fase] ([tempo estimado])**
    1. [Passo espec√≠fico]
    2. [Passo espec√≠fico]
    3. [Passo espec√≠fico]

    ### **Fase 2: [Nome da fase] ([tempo estimado])**
    1. [Passo espec√≠fico]
    2. [Passo espec√≠fico]

    **Tempo Total Estimado**: [X] horas
    **Impacto**: [Alto/M√©dio/Baixo] para [aspecto espec√≠fico]
    **Risco**: [Alto/M√©dio/Baixo] ([justificativa])

    ## ü§ñ Instru√ß√µes para Agentes de IA

    ### **Code Agent (Fase 1)**:
    Combine a persona do `.asdlc/agents/code_agent.md` com a tarefa: "Implemente EXATAMENTE as tarefas detalhadas acima, criando e modificando os arquivos EXATAMENTE como listado no Manifesto de Arquivos. Siga TODOS os padr√µes obrigat√≥rios e princ√≠pios definidos. Use os exemplos de c√≥digo fornecidos como refer√™ncia."

    ### **Test Agent (Fase 2)**:
    Combine a persona do `.asdlc/agents/test_agent.md` com a tarefa: "Crie testes automatizados para validar TODOS os crit√©rios de aceita√ß√£o listados acima. Implemente testes unit√°rios, de integra√ß√£o e de performance conforme as m√©tricas de sucesso definidas."

    ### **Review Agent (Fase 3)**:
    Combine a persona do `.asdlc/agents/review_agent.md` com a tarefa: "Analise o c√≥digo implementado verificando conformidade com TODOS os padr√µes obrigat√≥rios, princ√≠pios e crit√©rios de aceita√ß√£o. Valide as m√©tricas de sucesso e documente qualquer desvio."

    ### **Requirements Agent (Opcional)**:
    Combine a persona do `.asdlc/agents/requirements_agent.md` com a tarefa: "Analise se os requisitos foram completamente atendidos e se h√° gaps na implementa√ß√£o. Sugira melhorias se necess√°rio."

    ### **Architecture Agent (Opcional)**:
    Combine a persona do `.asdlc/agents/architecture_agent.md` com a tarefa: "Valide a arquitetura implementada e verifique se est√° alinhada com os princ√≠pios de design definidos. Sugira otimiza√ß√µes arquiteturais se necess√°rio."

    ---

    ## ‚úÖ Checklist de Execu√ß√£o

    - [ ] **Fase 1: Escrita de C√≥digo**
      - **Instru√ß√£o para o Cursor:** Combine a persona do `.asdlc/agents/code_agent.md` com a tarefa: "Implemente a funcionalidade descrita acima, criando e modificando os arquivos EXATAMENTE como listado no Manifesto de Arquivos. Siga as regras do `PROJECT_CONTEXT.md`."

    - [ ] **Fase 2: Escrita de Testes**
      - **Instru√ß√£o para o Cursor:** Combine a persona do `.asdlc/agents/test_agent.md` com a tarefa: "Crie os testes necess√°rios para o c√≥digo gerado na fase anterior."

    - [ ] **Fase 3: Finaliza√ß√£o**
      - **Instru√ß√£o para o Cursor:** "Modifique o frontmatter deste arquivo, alterando o `status` para 'CONCLU√çDO'."
    """

    # 3. Chamar a LLM
    plano_gerado = call_llm(prompt, max_tokens=3072) # Aumentar tokens para planos complexos

    return plano_gerado 